---
title: "Problem Set #1"
author: "INSERT YOUR NAME HERE"
date: "insert date here"
format: pdf

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
\textcolor{red}{\textbf{Grade /20}}

# Overview 

Welcome to Introduction to Programming and Data Management using R! This problem set is intended to give you some practice becoming familiar with using R. In this problem set, we are asking you to: create an R project; knit a .QMD file to pdf [IF WE WANT THEM TO SUBMIT R SCRIPT, DO THEY NEED TO KNIT?]; load and investigate an R data frame that is stored on the web [GIVE THEM FILE?]; apply some basic functions to atomic vectors; and create a GitHub issue.

- Note: Change the values of the YAML header above to your name and the date. 


## Question 1: Creating an R project & R script

\textcolor{red}{\textbf{/2 pts}}

**Create an R project**  

- Create a folder where you want to save files associated with problem set 1. Make sure to name the folder "problemset1".
  - For instance, the file directory/structure could be EDUC260a >> problem_sets >> problemset1.
- In RStudio, click on "File" >> "New Project" >> "Existing Directory" >> "Browse".
- Browse to find and select your problem set 1 folder.
- Click on "Create Project".
  - An R project file has the extension ".Rproj".
  - The name of the file should be "problemset1.Rproj".
  

**Create an R script**  
- In RStudio, click on "File" >> "New File" >> "R Script" 
- Make sure to save your R script in the folder you just created and name it "problemset1.R" 

- In your R script, run the `getwd()` function and the `list.files()` function.
- What is the output? Why? Make sure to comment out your text using a `#`  

```{r, eval=FALSE}
getwd()
list.files()
```

**Answer:** The output are files: "problemset1.R", "problemset1.qmd", and "problemset1.Rproj" because these are the files currently saved in the folder where this .R file is saved.

## Question 2: Knit to pdf  

\textcolor{red}{\textbf{/1 pts}}

- Open the "problemset.qmd" file in your folder. At the top of this .Rmd file, type in your first and last name in the appropriate place in the YAML header (e.g. "Joe Bruin").
- in the date field of the YAML header, insert the date within quotations (any date format is fine).
- Now click the "Render" button near the top of your RStudio window (blue arrow icon) or drop down and select "Render Document".
  - Alternatively you can use the shortcut: __Cmd/Ctrl + Shift + k__.

  - *Note*: One goal of this assignment is to make sure you are able to render to a PDF without running into errors.
  
- In your R script, run the `list.files()` function.
- What is the output? Did it change? Make sure to comment out your text in your R script using a `#`.

```{r}
list.files()
```


## Question 3: Load .Rdata directly with url and then investigate the data frame [GIVE THEM R DATE OR CSV FILE?]

\textcolor{red}{\textbf{/7 pts}}

1. This question asks you to load a dataset by specifying the `read_csv()` function and the name of the dataset.

  - Hint: You will need to load the library `readr`. To load a csv file use the `read_csv()` function and in quotes the name of the csv file: `read_csv("csv file")`.
  - Name the dataframe "df_recruiting": `df_recruiting <- read_csv("csv file")`


Load the dataframe within this code chunk below.
```{r}
#?load
library(readr)
#load(url("https://github.com/anyone-can-cook/rclass1/raw/master/data/recruiting/recruit_ps1_small.Rdata"))

#write_csv(df_recruiting, "recruit_ps1.csv")

df_recruiting <- read_csv("recruit_ps1.csv")
```


2. Print the data frame `df_recruiting` by typing its name.
```{r}
df_recruiting
```

3. Use the `typeof()` function to investigate the type of data frame `df_recruiting`.
```{r}
typeof(df_recruiting)
```

4. Apply the `length()` function to the data frame `df_recruiting`. What does this output mean in your own words?
```{r}
length(df_recruiting)
```

**Answer:** the data frame object `df_recruiting` has a length of 6, meaning that there are 6 elements in the object.

5. Use the `str()` function to investigate the structure of the data frame `df_recruiting`.
```{r}
str(df_recruiting)
```
6. Use the `names` function to list the names of the elements (variables) within `df_recruiting`.
```{r}
names(df_recruiting)
```
7. Wrap your answer above --- `names(data_frame_name)` --- within the `typeof()` function. Do the same for the `length()` function, and the `str()` function as well. Interpret what the output means in your own words.

```{r}
typeof(names(df_recruiting))
length(names(df_recruiting))
str(names(df_recruiting))
```

**Answer:** the names of the elements of the data frame object `df_recruiting` are a character atomic vector of 6 elements

## Question 4: Applying basic functions to atomic vectors

\textcolor{red}{\textbf{/9 pts}}

1. Create an atomic vector object named age with the following values: 3, 6, 41, 43.

```{r}
age <- c(3,6,41,43)
```

2. Apply the `typeof()`, `length()`, and `str()` functions to the object `age`.

```{r}
typeof(age)
length(age)
str(age)
```
3. Apply the `sum()` function to `age`.
```{r}
sum(age)
```

4. In general, what is a function "argument name" and what is an "argument value"? What does the argument `na.rm` do?

**Answer:** When calling a function, the argument name tells R which argument you are referring to (e.g., the `trim` argument) and the argument value is the value you are assigning to that argument. the argument `na.rm` controls whether `NA` values are removed or not prior to performing calculations.

5. Create a new object `age2` with the following values: 3, 6, 41, 43, NA. Now calculate the sum of `age2` using the argument `na.rm = FALSE` and then calculate the sum using the argument `na.rm = TRUE`. Explain why the outputs of these two `sum()` functions differ.
```{r}
age2 <- c(3,6,41,43,NA)
sum(age2, na.rm = FALSE)
sum(age2, na.rm = TRUE)
```

**Answer:** The function `sum(age2, na.rm = FALSE)` returns `NA` because `NA` values are not removed prior to calculation and any calculation that includes an `NA` value returns `NA`. The function `sum(age2, na.rm = TRUE)` does not return `NA` because all `NA` values are removed prior to calculation.

6. Create a vector `tf` using the following code: `tf <- c(TRUE,FALSE,TRUE,FALSE,TRUE)`. Next apply the  `typeof()`, `length()`, and `str()` functions to the object `tf`. Based on this output, briefly describe the object `tf` in your own words (one sentence is fine).
```{r}
tf <- c(TRUE,FALSE,TRUE,FALSE,TRUE,NA)

typeof(tf)
length(tf)
str(tf)
```

**Answer:** the object `tf` is an atomic vector of logical type with 5 elements.

7. Apply the `sum()` function to the object, using the option to remove `NA` values prior to calculation. What numeric value do mathematical calculations in `R` assign to `TRUE` values and what do they assign to `FALSE` values?
```{r}
sum(tf, na.rm = TRUE)
```

**Answer:** Mathematical calculations in `R` assign the value of `0` to `FALSE` and the value of `1` to `TRUE`


8. This is the syntax of the `mean()` function that includes both argument names and the default values for arguments: `mean(x, trim = 0, na.rm = FALSE)`. 

When using a function, `R` requires you to type the values you assign to each argument, but typing in the argument names is usually optional. Even though it takes a bit more time, I usually like typing in both argument names and argument values, because it forces me to be more conscious about what value I am assigning to which argument, especially when a function is new to me. 

Use the `mean()` function to calculate the mean of object `tf` (removing `NA` values prior to calculation). In your function call, include both the argument name and the argument value for each argument (argument value for the `trim` argument can be `0`). Then run the same function, but without typing any argument names.

```{r}
mean(x=tf, trim = 0, na.rm = TRUE)
mean(tf, 0, TRUE)
```

## Question 5: Create a GitHub issue  

\textcolor{red}{\textbf{/1 pts}}  

- Go to the [class repository](https://github.com/anyone-can-cook/rclass1_student_issues_f23/issues) and create a new issue.

- Refer to [rclass1 student issues readme](https://github.com/anyone-can-cook/rclass1_student_issues_f23/blob/main/README.md) for instructions on how to post questions or reflections.

- You are also required to respond to at least one issue posted by another student.

- Paste the url to your issue here: 
- Paste the url to the issue you responded to here:   

# Knit to pdf and submit problem set  

**Knit to pdf** by clicking the "Knit" button near the top of your RStudio window (icon with blue yarn ball) or drop down and select "Knit to PDF".

- Go to the [class website](https://anyone-can-cook.github.io/rclass1/) and under the "Readings & Assignments" >> "Week 1" tab, click on the "Problem set 1 submission link".  
- Submit both .Rmd and .pdf files.  
- Use this naming convention "lastname_firstname_ps#" for your .Rmd and pdf files (e.g. jaquette_ozan_ps1.Rmd & jaquette_ozan_ps1.pdf).
